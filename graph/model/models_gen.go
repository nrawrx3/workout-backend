// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type User struct {
	ID       string `json:"id"`
	UserName string `json:"user_name"`
	Email    string `json:"email"`
}

type Workout struct {
	ID              string      `json:"id"`
	Reps            int         `json:"reps"`
	Rounds          int         `json:"rounds"`
	DurationSeconds int         `json:"duration_seconds"`
	Kind            WorkoutKind `json:"kind"`
	Order           int         `json:"order"`
	UserID          string      `json:"user_id"`
}

type WorkoutKind string

const (
	WorkoutKindPushUps       WorkoutKind = "PUSH_UPS"
	WorkoutKindOneTwos       WorkoutKind = "ONE_TWOS"
	WorkoutKindBurpees       WorkoutKind = "BURPEES"
	WorkoutKindKneesOverToes WorkoutKind = "KNEES_OVER_TOES"
)

var AllWorkoutKind = []WorkoutKind{
	WorkoutKindPushUps,
	WorkoutKindOneTwos,
	WorkoutKindBurpees,
	WorkoutKindKneesOverToes,
}

func (e WorkoutKind) IsValid() bool {
	switch e {
	case WorkoutKindPushUps, WorkoutKindOneTwos, WorkoutKindBurpees, WorkoutKindKneesOverToes:
		return true
	}
	return false
}

func (e WorkoutKind) String() string {
	return string(e)
}

func (e *WorkoutKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkoutKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkoutKind", str)
	}
	return nil
}

func (e WorkoutKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
